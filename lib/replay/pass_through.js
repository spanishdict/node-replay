// Generated by CoffeeScript 1.9.2
var ClientRequest, HTTP, passThrough;

HTTP = require("http");

ClientRequest = HTTP.ClientRequest;

passThrough = function(passThrough) {
  var boolean, hostname, ref, ref1;
  if (arguments.length === 0) {
    passThrough = function() {
      return true;
    };
  } else if (typeof passThrough === "string") {
    ref = [
      passThrough, function(request) {
        return request.hostname === hostname;
      }
    ], hostname = ref[0], passThrough = ref[1];
  } else if (typeof passThrough !== "function") {
    ref1 = [
      passThrough, function(request) {
        return !!boolean;
      }
    ], boolean = ref1[0], passThrough = ref1[1];
  }
  return function(request, callback) {
    var http, i, len, options, part, ref2;
    if (passThrough(request)) {
      options = {
        protocol: request.url.protocol,
        hostname: request.url.hostname,
        port: request.url.port,
        path: request.url.path,
        method: request.method,
        headers: request.headers,
        agent: request.agent,
        auth: request.auth
      };
      http = new ClientRequest(options);
      if (request.trailers) {
        http.addTrailers(request.trailers);
      }
      http.on("error", function(error) {
        return callback(error);
      });
      http.on("response", function(response) {
        var captured;
        captured = {
          version: response.httpVersion,
          statusCode: response.statusCode,
          statusMessage: response.statusMessage,
          headers: response.headers,
          rawHeaders: response.rawHeaders,
          body: []
        };
        response.on("data", function(chunk, encoding) {
          return captured.body.push([chunk, encoding]);
        });
        return response.on("end", function() {
          captured.trailers = response.trailers;
          captured.rawTrailers = response.rawTrailers;
          return callback(null, captured);
        });
      });
      if (request.body) {
        ref2 = request.body;
        for (i = 0, len = ref2.length; i < len; i++) {
          part = ref2[i];
          http.write(part[0], part[1]);
        }
      }
      return http.end();
    } else {
      return callback(null);
    }
  };
};

module.exports = passThrough;
